test <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", skip = 2, widths = c(rep(10,12,13,8,9,9,10,8,9)))
head(test)
test <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", skip = 4, widths = c(rep(10,12,13,8,9,9,10,8,9)))
head(test)
test <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", skip = 4, widths = c(rep(10,3,4,3,4,3,4,3,4)))
head(test)
test <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", skip = 4, widths = c(10,3,4,3,4,3,4,3,4))
head(test)
test <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", skip = 4, widths = c(11,3,4,3,4,3,4,3,4))
head(test)
test <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", skip = 4, widths = c(11,4,4,3,4,3,4,3,4))
head(test)
test <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", skip = 4, widths = c(16,4,8,3,4,3,4,3,4))
head(test)
?max
test <- c(1,4,2,5,14,134,2145,1243,5123,1245213,2,41,21,35,NA,314321,4,NA,1413,413,NA)
max(test)
max(test, TRUE)
max(test, na.rm = TRUE)
min(test, na.rm = TRUE)
library(data.table)
?table
?rep
library(swirl)
swirl()
swirl()
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(count))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(results3)
View(result3)
cran %>%
select(ip_id, country, package, size) %>%
print
submit()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size / 2^20)
submit()
submit()
submit()
?mutat
?mutate
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, c(sex, count, -grade))
gather(students, sex, count, -grade
gather(students, sex, count, -grade)
students2
res <- gather(students2, "sex_class", "count")
res <- gather(students2, "sex_class", "count", -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
seprate(res, sex_class, c("sex", "class"))
separate(res, sex_class, c("sex", "class"))
submit()
submit()
students3
?gather
submit()
submit()
?spread
submit()
library(readr)
parse_number("class5")
pause
pause()
bye()
swirl()
getwd()
install.packages("bootstrap", "jpeg", "ggplot2", "ggExtra", "ggdendro", "DT", "stringr", "gsubfun", "proto", "sqldf", "shinyjs", "shinyBS", "shinydashboard", "plotly", "googleVis", "")
install.packages("bootstrap", "jpeg", "ggplot2", "ggExtra", "ggdendro", "DT", "stringr", "gsubfun", "proto", "sqldf", "shinyjs", "shinyBS", "shinydashboard", "plotly", "googleVis", "")
install.packages("bootstrap", "ggplot2", "ggExtra", "ggdendro", "DT", "stringr", "gsubfun", "proto", "sqldf", "shinyjs", "shinyBS", "shinydashboard", "plotly", "googleVis", "")
install.packages("bootstrap", "ggplot2", "ggExtra", "ggdendro", "DT", "stringr", "gsubfun", "proto", "sqldf", "shinyjs", "shinyBS", "shinydashboard", "plotly", "googleVis", "")
install.packages("bootstrap", "ggExtra", "ggdendro", "DT", "stringr", "gsubfun", "proto", "sqldf", "shinyjs", "shinyBS", "shinydashboard", "plotly", "googleVis", "")
install.packages("bootstrap", "ggdendro", "DT", "stringr", "gsubfun", "proto", "sqldf", "shinyjs", "shinyBS", "shinydashboard", "plotly", "googleVis", "")
install.packages("shiny")
install.packages("bootstrap")
install.packages("jpeg")
install.packages("ggplot2")
install.packages("ggExtra")
install.packages("ggdendro")
install.packages("DT")
install.packages("stringr")
install.packages("gsubfn")
install.packages("proto")
install.packages("sqldf")
install.packages("shinyjs")
install.packages("shinyBS")
install.packages("shinydashboard")
install.packages("plotly")
install.packages("googleVis")
install.packages("lubridate")
install.packages("lubridate")
install.packages("lubridate", dependencies = T)
library(lubridate)
getwd()
setwd("C:/Users/corre/OneDrive/Documents/GitHub/ExtrApp")
source("DataLoading.R")
library(bootstrap)
library(stringr)
remove.packages(c("ggplot2", "data.table"))
install.packages('Rcpp', dependencies = TRUE)
install.packages('ggplot2', dependencies = TRUE)
8
remove.packages(c("ggplot2", "data.table"))
install.packages('Rcpp', dependencies = TRUE)
install.packages('ggplot2', dependencies = TRUE)
install.packages('data.table', dependencies = TRUE)
install.packages("shiny")
install.packages("bootstrap")
install.packages("jpeg")
install.packages("DT")
install.packages("stringr")
install.packages("gsubfn")
install.packages("proto")
install.packages("sqldf")
install.packages("plyr")
install.packages("shinyjs")
install.packages("shinyBS")
install.packages("shinydashboard")
install.packages("plotly")
install.packages("googleVis")
install.packages("lubridate")
source("DataLoading.R")
warnings()
source("UI.R")
runApp()
runApp()
runApp()
View(total_pps_data)
total_pps_data[,Shopping.Cart := unlist(lapply(Part.Number, FUN = function(x){
actionButton(inputId = paste0("button_", x),
label = "Add Part",
onclick = 'Shiny.onInputChange(\"totaladd_button\", this.id)')
}))]
#getting the total buttons
#adding the shopping cart add button
total_pps_data[,Shopping.Cart := mapply(Part.Number, FUN = function(x){
actionButton(inputId = paste0("button_", x),
label = "Add Part",
onclick = 'Shiny.onInputChange(\"totaladd_button\", this.id)')
})]
#getting the total buttons
#adding the shopping cart add button
total_pps_data[,Shopping.Cart := lapply(Part.Number, FUN = function(x){
as.character(actionButton(inputId = paste0("button_", x),
label = "Add Part",
onclick = 'Shiny.onInputChange(\"totaladd_button\", this.id)'))
})]
microbenchmark::microbenchmark(otal_pps_data[,Shopping.Cart := lapply(Part.Number, FUN = function(x){
as.character(actionButton(inputId = paste0("button_", x),
label = "Add Part",
onclick = 'Shiny.onInputChange(\"totaladd_button\", this.id)'))
})])
microbenchmark::microbenchmark(total_pps_data[,Shopping.Cart := lapply(Part.Number, FUN = function(x){
as.character(actionButton(inputId = paste0("button_", x),
label = "Add Part",
onclick = 'Shiny.onInputChange(\"totaladd_button\", this.id)'))
})])
View(total_pps_data)
total_pps_data[,Part.Number.Search := Part.Number]
total_pps_data[,PPS.Number.Search := PPS.Number]
#### DATA CLEANING For all Data Tables ####
#obtain values for the filters
total_pps_data[,Part.Number.Search := Part.Number]
total_pps_data[,PPS.Number.Search := PPS.Number]
total_pps_data[,Part.Number := lapply(Part.Number.Search, FUN = function(x){
as.character(actionButton(inputId = paste0("print_button_", x),
label = x,
onclick = paste0("window.open(\"https://plm.bsci.bossci.com:1443/Windchill/netmarkets/jsp/bsci/plm/viewable/LatestEffectiveReleased.jsp?number=%11",
partsandprints[Part == x, Print], #get the print from the key
"\")")))
})]
total_pps_data[,PPS.Number := lapply(PPS.Number.Search, FUN = function(x){
as.character(actionButton(inputId = paste0("print_button_", x),
label = x,
onclick = paste0("window.open(\"https://plm.bsci.bossci.com:1443/Windchill/netmarkets/jsp/bsci/plm/viewable/LatestEffectiveReleased.jsp?number=%11",
x,
"\")")))
})]
#imports the key that relates a part number to a print
partsandprints <- fread(paste(path, "Parts and Prints.csv", sep = "/"),
header = TRUE,
check.names = T,
na.strings = c("NA", ""),
stringsAsFactors = FALSE)
#Creating variables across all sessions
#getting path for the data files
path <- "//Mgrovef1/shared/Operations/EXTRUSIO/Felipe Correa Netto/Extrusion Application/Data/UI Data/Dev"
#imports the key that relates a part number to a print
partsandprints <- fread(paste(path, "Parts and Prints.csv", sep = "/"),
header = TRUE,
check.names = T,
na.strings = c("NA", ""),
stringsAsFactors = FALSE)
total_pps_data[,Part.Number := lapply(Part.Number.Search, FUN = function(x){
as.character(actionButton(inputId = paste0("print_button_", x),
label = x,
onclick = paste0("window.open(\"https://plm.bsci.bossci.com:1443/Windchill/netmarkets/jsp/bsci/plm/viewable/LatestEffectiveReleased.jsp?number=%11",
partsandprints[Part == x, Print], #get the print from the key
"\")")))
})]
total_pps_data[,PPS.Number := lapply(PPS.Number.Search, FUN = function(x){
as.character(actionButton(inputId = paste0("print_button_", x),
label = x,
onclick = paste0("window.open(\"https://plm.bsci.bossci.com:1443/Windchill/netmarkets/jsp/bsci/plm/viewable/LatestEffectiveReleased.jsp?number=%11",
x,
"\")")))
})]
View(total_pps_data)
#These two functions are for the server
total_pps_data[,Part.Number := lapply(Part.Number.Search, FUN = function(x){
as.character(actionButton(inputId = paste0("print_button_", x),
label = x,
onclick = paste0("window.open(\"https://plm.bsci.bossci.com:1443/Windchill/netmarkets/jsp/bsci/plm/viewable/LatestEffectiveReleased.jsp?number=%11",
partsandprints[Part == x, Print], #get the print from the key
"\")")))
})]
source("UI.R")
runApp()
runApp()
runApp()
runApp()
source("UI.R")
getwd()
source("Server.R")
ui<-dashboardPage(
dashboardHeader(title = "SIBYL - Extrusion Application",
titleWidth = 350
),
dashboardSidebar(
width = 350,
sidebarMenu(id = "tabs",
menuItem("Welcome", tabName = "welcome", icon = icon("home")),
menuItem("Part Catalog - PPS Data", tabName = "partcatalog", icon = icon("list")),
menuItem("Sampling and Test Method Information", tabName = "samplinginformation", icon = icon("wrench")),
menuItem("MES & SAP Batch Data", tabName = "mesdata", icon = icon("cogs")),
menuItem("Shopping Cart PPS Data", tabName = "shoppingcartdata"),
menuItem("Analysis Tool", tabName = "analysistool", icon=icon("bar-chart")),
menuItem("Help", tabName = "help", icon = icon("question-circle-o"))
) #end sidebarMenu
), #end dashboardSidebar
dashboardBody(
tabItems(
tabItem(tabName = "welcome",
fluidRow(
box(title = "Introduction", solidHeader = TRUE, status = "info", width = 12,
tags$p(HTML(paste(readLines("IntroductionText.txt"), collapse = "<br>")))
)#end box
),#end fluidRow
fluidRow(
box(title = "About the Part Catalog", solidHeader = TRUE, status = "primary", width = 12,
tags$p(HTML(paste(readLines("PartCatalogText.txt"), collapse = "<br>")))
)#end box
),#end fluidRow
fluidRow(
box(title = "About the Shopping Cart", solidHeader = TRUE, status = "info", width = 12,
tags$p(HTML(paste(readLines("ShoppingCartText.txt"), collapse = "<br>")))
)#end box
),#end fluidRow
fluidRow(
box(title = "About the MES Batch Information", solidHeader = TRUE, status = "primary", width = 12,
tags$p(HTML(paste(readLines("MESBatchInformationText.txt"), collapse = "<br>")))
)#end box
),#end fluidRow
fluidRow(
box(title = "About the Scrap Codes", solidHeader = TRUE, status = "info", width = 12,
tags$p(HTML(paste(readLines("ScrapRatesAndCodesText.txt"), collapse = "<br>")))
)#end box
)#end fluidRow
), #end tabItem
tabItem(tabName = "partcatalog",
fluidRow(
column(12,offset = 0, style='padding:0px;',
box(title = "Windchill Information",
solidHeader = TRUE, status = "primary", collapsible = TRUE,
width = 2,
selectInput("windchill_select",
label = NULL,
choices = filterkey[Filter.Type == "Windchill", Filter],
multiple = TRUE,
selectize = TRUE,
selected = c("Part Number", "Part Description")
)
),
box(title = "Resin Information",
solidHeader = TRUE, status = "primary", collapsible = TRUE,
width = 2,
selectInput("resin_select",
label = NULL,
choices = filterkey[Filter.Type == "Resin", Filter],
multiple = TRUE,
selectize = TRUE,
selected = NULL
)
),
box(title = "Tooling Information",
solidHeader = TRUE, status = "primary", collapsible = TRUE,
width = 2,
selectInput("tooling_select",
label = NULL,
choices = filterkey[Filter.Type == "Tooling", Filter],
multiple = TRUE,
selectize = TRUE,
selected = NULL
)
),
box(title = "Parameter Information",
solidHeader = TRUE, status = "primary", collapsible = TRUE,
width = 2,
selectInput("parameter_select",
label = NULL,
choices = filterkey[Filter.Type == "Parameter", Filter],
multiple = TRUE,
selectize = TRUE,
selected = NULL
)
),
box(title = "Attribute Information",
solidHeader = TRUE, status = "primary", collapsible = TRUE,
width = 2,
selectInput("attribute_select",
label = NULL,
choices = filterkey[Filter.Type == "Attribute", Filter],
multiple = TRUE,
selectize = TRUE,
selected = c("Inner Diameter (in)", "Outer Diameter (in)",
"Length (in)")
)
),
box(title = "Special Information",
solidHeader = TRUE, status = "primary", collapsible = TRUE,
width = 2,
selectInput("special_select",
label = NULL,
choices = filterkey[Filter.Type == "Special", Filter],
multiple = TRUE,
selectize = TRUE,
selected = NULL
)
)
)
), #end fluidRow
fluidRow(
#DT::dataTableOutput("catalog_table")
)
) #end tabItem
)#end tabItems
) #end DashBoard
)#end UI
runApp()
runApp()
getwd()
source(DataLoading.R)
source("DataLoading.R")
ui<-dashboardPage(
dashboardHeader(title = "SIBYL - Extrusion Application",
titleWidth = 350
),
dashboardSidebar(
width = 350,
sidebarMenu(id = "tabs",
menuItem("Welcome", tabName = "welcome", icon = icon("home")),
menuItem("Part Catalog - PPS Data", tabName = "partcatalog", icon = icon("list")),
menuItem("Sampling and Test Method Information", tabName = "samplinginformation", icon = icon("wrench")),
menuItem("MES & SAP Batch Data", tabName = "mesdata", icon = icon("cogs")),
menuItem("Shopping Cart PPS Data", tabName = "shoppingcartdata"),
menuItem("Analysis Tool", tabName = "analysistool", icon=icon("bar-chart")),
menuItem("Help", tabName = "help", icon = icon("question-circle-o"))
) #end sidebarMenu
), #end dashboardSidebar
dashboardBody(
tabItems(
tabItem(tabName = "welcome",
fluidRow(
box(title = "Introduction", solidHeader = TRUE, status = "info", width = 12,
tags$p(HTML(paste(readLines("IntroductionText.txt"), collapse = "<br>")))
)#end box
),#end fluidRow
fluidRow(
box(title = "About the Part Catalog", solidHeader = TRUE, status = "primary", width = 12,
tags$p(HTML(paste(readLines("PartCatalogText.txt"), collapse = "<br>")))
)#end box
),#end fluidRow
fluidRow(
box(title = "About the Shopping Cart", solidHeader = TRUE, status = "info", width = 12,
tags$p(HTML(paste(readLines("ShoppingCartText.txt"), collapse = "<br>")))
)#end box
),#end fluidRow
fluidRow(
box(title = "About the MES Batch Information", solidHeader = TRUE, status = "primary", width = 12,
tags$p(HTML(paste(readLines("MESBatchInformationText.txt"), collapse = "<br>")))
)#end box
),#end fluidRow
fluidRow(
box(title = "About the Scrap Codes", solidHeader = TRUE, status = "info", width = 12,
tags$p(HTML(paste(readLines("ScrapRatesAndCodesText.txt"), collapse = "<br>")))
)#end box
)#end fluidRow
), #end tabItem
tabItem(tabName = "partcatalog",
fluidRow(
column(12,offset = 0, style='padding:0px;',
box(title = "Windchill Information",
solidHeader = TRUE, status = "primary", collapsible = TRUE,
width = 2,
selectInput("windchill_select",
label = NULL,
choices = filterkey[Filter.Type == "Windchill", Filter],
multiple = TRUE,
selectize = TRUE,
selected = c("Part Number", "Part Description")
)
),
box(title = "Resin Information",
solidHeader = TRUE, status = "primary", collapsible = TRUE,
width = 2,
selectInput("resin_select",
label = NULL,
choices = filterkey[Filter.Type == "Resin", Filter],
multiple = TRUE,
selectize = TRUE,
selected = NULL
)
),
box(title = "Tooling Information",
solidHeader = TRUE, status = "primary", collapsible = TRUE,
width = 2,
selectInput("tooling_select",
label = NULL,
choices = filterkey[Filter.Type == "Tooling", Filter],
multiple = TRUE,
selectize = TRUE,
selected = NULL
)
),
box(title = "Parameter Information",
solidHeader = TRUE, status = "primary", collapsible = TRUE,
width = 2,
selectInput("parameter_select",
label = NULL,
choices = filterkey[Filter.Type == "Parameter", Filter],
multiple = TRUE,
selectize = TRUE,
selected = NULL
)
),
box(title = "Attribute Information",
solidHeader = TRUE, status = "primary", collapsible = TRUE,
width = 2,
selectInput("attribute_select",
label = NULL,
choices = filterkey[Filter.Type == "Attribute", Filter],
multiple = TRUE,
selectize = TRUE,
selected = c("Inner Diameter (in)", "Outer Diameter (in)",
"Length (in)")
)
),
box(title = "Special Information",
solidHeader = TRUE, status = "primary", collapsible = TRUE,
width = 2,
selectInput("special_select",
label = NULL,
choices = filterkey[Filter.Type == "Special", Filter],
multiple = TRUE,
selectize = TRUE,
selected = NULL
)
)
)
), #end fluidRow
fluidRow(
#DT::dataTableOutput("catalog_table")
)
) #end tabItem
)#end tabItems
) #end DashBoard Body
)#end UI
runApp()
